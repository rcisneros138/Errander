@model Errander.Models.Errand
@{
    ViewBag.Title = "TakeErrand";
}
<head>
    <script src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
</head>

<h2>TakeErrand</h2>
<div class="container">
    <h4>Errand</h4>
    <hr />
<div class="col-md-6">
    <dl class="dl-horizontal">
        
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CurrentLocation)
        </dt>

        <dd id="currentLoc">
            @Html.DisplayFor(model => model.CurrentLocation)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.ErrandDestination)
        </dt>

        <dd id="errandDest">
            @Html.DisplayFor(model => model.ErrandDestination)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.City)
        </dt>

        <dd id="userCity">
            @Html.DisplayFor(model => model.City)
        </dd>

      
        <dt>
            @Html.DisplayNameFor(model => model.AmountOffered)
        </dt>

        <dd>
            $@Html.DisplayFor(model => model.AmountOffered)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.NeededBy)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.NeededBy)
        </dd>
        <dt>
            Distance <br />
            Durration
        </dt>
        <dd id="ETA">

        </dd>

    </dl>
  
    



    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-actions no-color leftoffset">
            <input type="submit" value="TakeErrand" class="btn btn-success" /> |
            @Html.ActionLink("Back to List", "Index", new { Controller = "Home" }, new { @class = "btn btn-danger" })
        </div>
    }
</div>
<div class="col-md-6">
    <script>

geocoder = new google.maps.Geocoder();

function getDistance(StartAddress, EndAddress, startLat, startLng, endLat, endLng) {
   
    var origin1 = new google.maps.LatLng(startLat,startLng);
    var origin2 = StartAddress;
    var destinationA = EndAddress;
    var destinationB = new google.maps.LatLng(endLat, endLng);
   


    var service = new google.maps.DistanceMatrixService();
    service.getDistanceMatrix(
        {
            origins: [origin1, origin2],
            destinations: [destinationA,destinationB],
            travelMode: google.maps.TravelMode.DRIVING,
           
        }, function (response, status) {
            if (status == google.maps.DistanceMatrixStatus.OK && response.rows[0].elements[0].status != "ZERO_RESULTS") {
                var distance = response.rows[0].elements[0].distance.text;
                var duration = response.rows[0].elements[0].duration.text;
                document.getElementById("ETA").innerHTML = distance + duration;
                var dvDistance = document.getElementById("ETA");
                dvDistance.innerHTML = "";
                dvDistance.innerHTML += "Distance: " + distance + "<br />";
                dvDistance.innerHTML += "Duration:" + duration;
            } else {
                alert("Unable to find the distance via road.");
            }
        });
   
}

   

function initialize() {

    var mapProp = {
        center: { lat: 40, lng: -100 },
        zoom: 7,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
    var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
    var address1 = document.getElementById("errandDest").innerHTML
    
    var address2 = document.getElementById("currentLoc").innerHTML + document.getElementById("userCity").innerHTML;
   
    getCoordinate(address1, address2, map);
    document.getElementById("ETA").innerHTML = "1";
   

}
var callbackCounter = 0;
var callback = function (firstAddress, secondAddress, startLat, startLng, endLat, endLng) {
    callbackCounter++;
    if (callbackCounter == 2) {
        getDistance(firstAddress, secondAddress, startLat, startLng, endLat, endLng);
    }
}

function getCoordinate(firstAddress, secondAddress, Resultmap) {
    var that = this;
    var startLat;
    var startLng;
    var endLat;
    var endLng;


    geocoder.geocode({ 'address': firstAddress }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            Resultmap.setCenter(results[0].geometry.location);
           
            startLat = results[0].geometry.location.lat();
            startLng = results[0].geometry.location.lng();
            //document.getElementById("hidden1").innerHTML = startLat;
            //document.getElementById("hidden2").innerHTML = startlng;
            var marker1 = new google.maps.Marker({
                map: Resultmap,
                position: results[0].geometry.location
                

            });
        }
        callback(firstAddress, secondAddress, startLat, startLng, endLat, endLng);
       
    });
    geocoder.geocode({ 'address': secondAddress }, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            Resultmap.setCenter(results[0].geometry.location);
            endLat = results[0].geometry.location.lat();
            endLng = results[0].geometry.location.lng();
            var marker2 = new google.maps.Marker({
                map: Resultmap,
                position: results[0].geometry.location

            });
        }
        callback(firstAddress, secondAddress, startLat, startLng, endLat, endLng);
    });
 
    
    
    
}


$(document).ready(function(){
initialize()
});
    //google.maps.event.addDomListener(window, 'load', initialize);
    </script>


<div id="googleMap" style="width:500px;height:380px;"></div>
</div>
</div>
